// Generated by CoffeeScript 1.4.0
var filename, projfls, readTextFile;

readTextFile = function(name) {
  var FA_path, IA_path, VMR, VMR_path, filecounter, filename, filenamesfile, files_to_process, fmr_files, fmr_regex, i, make_VTC, match, name_regex, newmatch, textstr, total_lines, vtc, vtc_names, x_end, x_start, xcoords_regex, y_end, y_start, ycoords_regex, z_end, z_start, zcoords_regex;
  fmr_files = [];
  vtc_names = [];
  x_start = [];
  x_end = [];
  y_start = [];
  y_end = [];
  z_start = [];
  z_end = [];
  BrainVoyagerQX.PrintToLog("Reading: " + name);
  filenamesfile = new QFile(name);
  filenamesfile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
  textstr = new QTextStream(filenamesfile);
  total_lines = parseInt(textstr.readLine());
  VMR_path = textstr.readLine();
  FA_path = textstr.readLine();
  IA_path = textstr.readLine();
  fmr_regex = /.fmr/;
  name_regex = /.*[^(.fmr)]/;
  xcoords_regex = /(BV.*X\: )(\d+)( )(\d+)/;
  ycoords_regex = /(BV.*Y\: )(\d+)( )(\d+)/;
  zcoords_regex = /(BV.*Z\: )(\d+)( )(\d+)/;
  filecounter = 0;
  while (filecounter < total_lines) {
    filename = textstr.readLine();
    if (name_regex.test(filename) === true) {
      match = name_regex.exec(filename);
      vtc = "_NATIVE.vtc";
      newmatch = match + vtc;
      vtc_names.push(newmatch);
    }
    if (fmr_regex.test(filename) === true) {
      fmr_files.push(filename);
    }
    if (xcoords_regex.test(filename) === true) {
      match = xcoords_regex.exec(filename);
      y_start.push(match[2]);
      y_end.push(match[4]);
    }
    if (ycoords_regex.test(filename) === true) {
      match = ycoords_regex.exec(filename);
      z_start.push(match[2]);
      z_end.push(match[4]);
    }
    if (zcoords_regex.test(filename) === true) {
      match = zcoords_regex.exec(filename);
      x_start.push(match[2]);
      x_end.push(match[4]);
    }
    filecounter++;
  }
  i = 0;
  files_to_process = total_lines - 3;
  while (i < files_to_process) {
    VMR = BrainVoyagerQX.OpenDocument(VMR_path);
    VMR.UseBoundingBoxForVTCCreation = true;
    VMR.TargetVTCBoundingBoxXStart = x_start;
    VMR.TargetVTCBoundingBoxXEnd = x_end;
    VMR.TargetVTCBoundingBoxYStart = y_start;
    VMR.TargetVTCBoundingBoxYEnd = y_end;
    VMR.TargetVTCBoundingBoxZStart = z_start;
    VMR.TargetVTCBoundingBoxZEnd = z_end;
    VMR.ExtendedTALSpaceForVTCCreation = false;
    make_VTC = VMR.CreateVTCInVMRSpace(fmr_files[i], IA_path, FA_path, vtc_names[i], 1, 2, 1, 100);
    VMR.Close();
    i++;
  }
  return filenamesfile.close();
};

filename = String("");

projfls = this.readTextFile(filename);
